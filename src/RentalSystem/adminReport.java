/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package RentalSystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.Year;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class adminReport extends javax.swing.JFrame {
    /**
     * Creates new form adminReport
     */
    public adminReport() {
        initComponents();
        displayYear();
        //displayButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbRentMonth = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbRentYear = new javax.swing.JComboBox<>();
        cbSalesYear = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tSales = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tRent = new javax.swing.JTable();
        bBack = new javax.swing.JButton();
        bGenerate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Car Rental System");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("View Report");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Sales Statistic for year:");

        cbRentMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Most Rented Car in:");

        tSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tSales.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tSales);

        tRent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tRent);

        bBack.setText("Back");
        bBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackActionPerformed(evt);
            }
        });

        bGenerate.setText("Generate");
        bGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbSalesYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bGenerate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(bBack))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbRentYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbRentMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbSalesYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbRentYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRentMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBack)
                    .addComponent(bGenerate))
                .addContainerGap())
        );

        cbRentYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year" }));
        cbRentYear.setEditable(false);
        cbSalesYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year" }));
        cbSalesYear.setEditable(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackActionPerformed
        dispose();
        customerMain frame = new customerMain();
        frame.setVisible(true);
    }//GEN-LAST:event_bBackActionPerformed

    private void bGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerateActionPerformed
        generateRentReport();
        generateSalesReport();
    }//GEN-LAST:event_bGenerateActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    //display month and year in drop down
    public void displayButton(){
        boolean allFilled = cbSalesYear.getSelectedIndex() != 0 &&
                            cbRentYear.getSelectedIndex() != 0 &&
                            cbRentMonth.getSelectedIndex() != 0;
    
        bGenerate.setEnabled(allFilled);
    }
    
    public void displayYear(){
        int currentYear = Year.now().getValue();
        for (int year = currentYear; year >= currentYear - 20; year--) {
            cbSalesYear.addItem(String.valueOf(year));
            cbRentYear.addItem(String.valueOf(year));
        }
    }
    
    private void generateSalesReport() {
        DefaultTableModel model = new DefaultTableModel();
        model.setRowCount(0);
        model.setColumnCount(0);
        // Header
        model.addColumn("Month");
        model.addColumn("Total Sales");
        model.addColumn("Total Refunded Amount");

        String selectedYear = cbSalesYear.getSelectedItem().toString();

        // HashMap to store month-wise sales and refund amounts
        HashMap<String, Double> salesByMonth = new HashMap<>();
        HashMap<String, Double> refundByMonth = new HashMap<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] record = line.split(",");
                String rStatus = record[6];
                if (rStatus.equals("COMPLETED") || rStatus.equals("REFUNDED")) {
                    String rStartDate = record[2];
                    String[] startDateParts = rStartDate.split("-");
                    String monthKey = startDateParts[1] + "-" + startDateParts[0];

                    // Check if the booking is in the selected year
                    if (startDateParts[0].equals(selectedYear)) {
                        double rPayAmount = Double.parseDouble(record[5]);
                        double rRefundAmount = 0;

                        // Update sales and refund amounts for the month
                        if (rStatus.equals("COMPLETED")) {
                            salesByMonth.put(monthKey, salesByMonth.getOrDefault(monthKey, 0.00) + rPayAmount);
                        } else if (rStatus.equals("REFUNDED")) {
                            rRefundAmount = rPayAmount * 0.25;
                            refundByMonth.put(monthKey, refundByMonth.getOrDefault(monthKey, 0.00) + rRefundAmount);
                        }
                    }
                }
            }

            String[] monthNames = {"", "January", "February", "March", "April", "May", "June", "July", 
                                   "August", "September", "October", "November", "December"};

            // Iterate over the HashMap and add month-wise totals to the model
            for (int i = 1; i <= 12; i++) {
                String monthName = monthNames[i];
                String monthKey = String.format("%02d", i) + "-" + selectedYear; // Adjusted month-year format

                if (salesByMonth.containsKey(monthKey)) {
                    double totalSales = salesByMonth.get(monthKey);
                    double totalRefund = refundByMonth.getOrDefault(monthKey, 0.00);
                    model.addRow(new Object[]{monthName, "RM" + totalSales, "RM" + totalRefund});
                } else {
                    // If no records for month
                    model.addRow(new Object[]{monthName, "RM -", "RM -"});
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //set the model to the table
        tSales.setModel(model);
    }

    private void generateRentReport() {
        DefaultTableModel model = new DefaultTableModel();
        model.setRowCount(0);
        model.setColumnCount(0);
        //header
        model.addColumn("Car ID");
        model.addColumn("Car Name");
        model.addColumn("Car Type");
        model.addColumn("Car Rate");
        model.addColumn("Rentals");
        model.addColumn("Cancellations");

        String selectedYear = cbRentYear.getSelectedItem().toString();
        String selectedMonth = cbRentMonth.getSelectedItem().toString();
        String selectedMonthNumber = ""; // Initialize the selected month number

        // Convert month name to number
        String[] monthNames = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        for (int i = 0; i < 12; i++) {
            if (monthNames[i].equalsIgnoreCase(selectedMonth)) {
                selectedMonthNumber = String.format("%02d", i+1);
                break;
            }
        }

        //HashMap to store car-wise rentals and cancellations
        HashMap<String, Integer> rentalsByCar = new HashMap<>();
        HashMap<String, Integer> cancellationsByCar = new HashMap<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] record = line.split(",");
                String rCarID = record[1];
                String rStatus = record[6];
                if (rStatus.equals("COMPLETED") || rStatus.equals("REFUNDED")) {
                    String rStartDate = record[2];
                    String[] startDateParts = rStartDate.split("-");
                    if (startDateParts[0].equals(selectedYear) && startDateParts[1].equals(selectedMonthNumber)) {
                        if (rStatus.equals("COMPLETED")) {
                            rentalsByCar.put(rCarID, rentalsByCar.getOrDefault(rCarID, 0) + 1);
                        } else if (rStatus.equals("REFUNDED")) {
                            cancellationsByCar.put(rCarID, cancellationsByCar.getOrDefault(rCarID, 0) + 1);
                        }
                    }
                }
            }
            
            List<String> allCarIDs = new ArrayList<>();
            try (BufferedReader carReader = new BufferedReader(new FileReader("car.txt"))) {
                String carLine;
                while ((carLine = carReader.readLine()) != null) {
                    String[] carRecord = carLine.split(",");
                    allCarIDs.add(carRecord[0]);
                }
            }

            // Iterate over the rented cars and add to the table
            for (String carID: allCarIDs) {
                int rentals = rentalsByCar.getOrDefault(carID, 0);
                int cancellations = cancellationsByCar.getOrDefault(carID, 0);
                Car car = new Car();
                String[] carDetails = car.getCarDetails(carID);

                if (carDetails != null) {
                    if (rentals == 0 && cancellations == 0) {
                        model.addRow(new Object[]{carID, carDetails[0], carDetails[1], "RM" + carDetails[2], 0, 0});
                    } else {
                        model.addRow(new Object[]{carID, carDetails[0], carDetails[1], "RM" + carDetails[2], rentals, cancellations});
                    }
                } 
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Set the model to the table
        tRent.setModel(model);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBack;
    private javax.swing.JButton bGenerate;
    private javax.swing.JComboBox<String> cbRentMonth;
    private javax.swing.JComboBox<String> cbRentYear;
    private javax.swing.JComboBox<String> cbSalesYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tRent;
    private javax.swing.JTable tSales;
    // End of variables declaration//GEN-END:variables
}
