/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package RentalSystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ASUS
 */
public class adminManageBooking extends javax.swing.JFrame {

    /**
     * Creates new form adminManageBooking
     */
    private TableRowSorter<TableModel> sorter;
    private int carID;

    public adminManageBooking() {
        initComponents();
        initSearch();
        bAll.setSelected(true);
        populateTable();
        addTableListener();
        bAction.setVisible(false);
        lcancel.setVisible(false);
        lreason.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tBooking = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        bBack = new javax.swing.JButton();
        bAction = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        sUsername = new javax.swing.JLabel();
        sStartDate = new javax.swing.JLabel();
        sEndDate = new javax.swing.JLabel();
        sPayAmount = new javax.swing.JLabel();
        sBookID = new javax.swing.JLabel();
        sCarName = new javax.swing.JLabel();
        sCarType = new javax.swing.JLabel();
        sBookingStatus = new javax.swing.JLabel();
        bPendRefund = new javax.swing.JRadioButton();
        bPendReturn = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        bCompleted = new javax.swing.JRadioButton();
        bAll = new javax.swing.JRadioButton();
        tMessage = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cUniqueID = new javax.swing.JComboBox<>();
        bRefunded = new javax.swing.JRadioButton();
        lcancel = new javax.swing.JLabel();
        lreason = new javax.swing.JLabel();
        bPendConfirm = new javax.swing.JRadioButton();
        bConfirmed = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("17 Car Rental System");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Manage Booking");

        tBooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tBooking.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tBooking);

        jLabel3.setText("Booking ID:");

        jLabel4.setText("Car Name:");

        jLabel5.setText("Car Type:");

        jLabel6.setText("Booking Status:");

        jLabel7.setText("Start Date:");

        jLabel8.setText("End Date:");

        jLabel9.setText("Payment Amount:");

        bBack.setBackground(new java.awt.Color(255, 51, 102));
        bBack.setForeground(new java.awt.Color(255, 255, 255));
        bBack.setText("Back");
        bBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackActionPerformed(evt);
            }
        });

        bAction.setText("Complete");
        bAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActionActionPerformed(evt);
            }
        });

        jLabel10.setText("Username:");

        sUsername.setText("-");

        sStartDate.setText("-");

        sEndDate.setText("-");

        sPayAmount.setText("-");

        sBookID.setText("-");

        sCarName.setText("-");

        sCarType.setText("-");

        sBookingStatus.setText("-");

        buttonGroup1.add(bPendRefund);
        bPendRefund.setText("Pending Refund");
        bPendRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPendRefundActionPerformed(evt);
            }
        });

        buttonGroup1.add(bPendReturn);
        bPendReturn.setText("Pending Return");
        bPendReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPendReturnActionPerformed(evt);
            }
        });

        jLabel19.setText("View:");

        buttonGroup1.add(bCompleted);
        bCompleted.setText("Completed");
        bCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCompletedActionPerformed(evt);
            }
        });

        buttonGroup1.add(bAll);
        bAll.setText("All");
        bAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAllActionPerformed(evt);
            }
        });

        tMessage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tMessage.setText("Select record to view booking details:");

        jLabel11.setText("Search:");

        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchActionPerformed(evt);
            }
        });

        jLabel12.setText("by");

        cUniqueID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booking ID", "Username" }));

        buttonGroup1.add(bRefunded);
        bRefunded.setText("Refunded");
        bRefunded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefundedActionPerformed(evt);
            }
        });

        lcancel.setText("Cancel Reason:");

        lreason.setText("-");

        buttonGroup1.add(bPendConfirm);
        bPendConfirm.setText("Pending Confirmation");
        bPendConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPendConfirmActionPerformed(evt);
            }
        });

        buttonGroup1.add(bConfirmed);
        bConfirmed.setText("Confirmed");
        bConfirmed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConfirmedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sBookingStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sCarName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sCarType, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(328, 328, 328)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tMessage)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bAction)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bBack))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bAll)
                            .addGap(7, 7, 7)
                            .addComponent(bPendConfirm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bPendReturn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bPendRefund)
                            .addGap(8, 8, 8)
                            .addComponent(bConfirmed)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bCompleted)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bRefunded)
                            .addGap(24, 24, 24)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cUniqueID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lreason, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(415, 415, 415)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(46, 46, 46)))
                .addContainerGap(405, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPendRefund)
                    .addComponent(bPendReturn)
                    .addComponent(jLabel19)
                    .addComponent(bCompleted)
                    .addComponent(bAll)
                    .addComponent(jLabel11)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(cUniqueID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRefunded)
                    .addComponent(bPendConfirm)
                    .addComponent(bConfirmed))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tMessage)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(sBookID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(sCarName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sCarType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(sBookingStatus)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(sUsername))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sStartDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(sEndDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(sPayAmount))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lcancel)
                    .addComponent(lreason))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBack)
                    .addComponent(bAction))
                .addGap(44, 44, 44))
        );

        getContentPane().add(tfSearch);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bPendRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPendRefundActionPerformed
        bAction.setText("Refund");
        bAction.setVisible(true);
        bAll.setSelected(false);
        bPendConfirm.setSelected(false);
        bPendReturn.setSelected(false);
        bConfirmed.setSelected(false);
        bCompleted.setSelected(false);
        bRefunded.setSelected(false);
        populateTable();
    }//GEN-LAST:event_bPendRefundActionPerformed

    private void bPendReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPendReturnActionPerformed
        bAction.setText("Complete");
        bAction.setVisible(true);
        bAll.setSelected(false);
        bPendConfirm.setSelected(false);
        bPendRefund.setSelected(false);
        bConfirmed.setSelected(false);
        bCompleted.setSelected(false);
        bRefunded.setSelected(false);
        populateTable();
    }//GEN-LAST:event_bPendReturnActionPerformed

    private void tfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchActionPerformed
        String searchQuery = tfSearch.getText();

        if (!searchQuery.isEmpty()) {
            RowFilter<TableModel, Object> rf = null;
            if (cUniqueID.getSelectedItem().equals("Booking ID")) {
                rf = RowFilter.regexFilter("(?i)" + searchQuery, 0); // Column index 0 corresponds to Booking ID
            } else if (cUniqueID.getSelectedItem().equals("Username")) {
                rf = RowFilter.regexFilter("(?i)" + searchQuery, 1); // Column index 1 corresponds to Username
            }
            if (rf != null) {
                sorter.setRowFilter(rf);
            }
        } else {
            resetSearch();
        }
    }//GEN-LAST:event_tfSearchActionPerformed

    private void bAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAllActionPerformed
        bAction.setVisible(false);
        bPendConfirm.setSelected(false);
        bPendReturn.setSelected(false);
        bPendRefund.setSelected(false);
        bConfirmed.setSelected(false);
        bCompleted.setSelected(false);
        bRefunded.setSelected(false);
        clearBookingDetailsLabels();
        populateTable();
    }//GEN-LAST:event_bAllActionPerformed

    private void bCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCompletedActionPerformed
        bAction.setVisible(false);
        bAll.setSelected(false);
        bPendConfirm.setSelected(false);
        bPendReturn.setSelected(false);
        bPendRefund.setSelected(false);
        bConfirmed.setSelected(false);
        bRefunded.setSelected(false);
        clearBookingDetailsLabels();
        populateTable();
    }//GEN-LAST:event_bCompletedActionPerformed

    private void bRefundedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefundedActionPerformed
        bAction.setVisible(false);
        bAll.setSelected(false);
        bPendConfirm.setSelected(false);
        bPendReturn.setSelected(false);
        bPendRefund.setSelected(false);
        bConfirmed.setSelected(false);
        bCompleted.setSelected(false);
        clearBookingDetailsLabels();
        populateTable();
    }//GEN-LAST:event_bRefundedActionPerformed

    private void bActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActionActionPerformed
        String bookIDText = sBookID.getText();
    
        if (bookIDText.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please select a record.");
            return; 
        }
        
        int currentBookID = Integer.parseInt(sBookID.getText());
        int carID = 1;
        boolean approve = false;
        Booking booking = new Booking(currentBookID);
        Customer customer = new Customer(sUsername.getText());
        if (bPendConfirm.isSelected()){ //to confirm booking
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to mark as confirmed?");
            if (confirm == JOptionPane.YES_OPTION){
                approve = true;
                booking.updateStatus(currentBookID, approve);
                JOptionPane.showMessageDialog(rootPane, "Booking marked as confirmed.");
            }
        } else if (bPendReturn.isSelected()){ //to mark as completed (after customer return car)
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to mark as complete?");
            if (confirm == JOptionPane.YES_OPTION){
                //validate if the user can get reward points
                String paymentString = sPayAmount.getText();
                String amountString = paymentString.substring(2); //remove RM
                double payment = Double.parseDouble(amountString); //actual payment paid by the customer
                
                Booking calBooking = new Booking(currentBookID, carID, sStartDate.getText() , sEndDate.getText());
                double paymentTotal = calBooking.calculatePaymentTotal(); //payment if no redeem points
                
                if (payment == paymentTotal){
                    int earnPoints = customer.calculateEarnablePoints(payment);
                    customer.addPoints(earnPoints);
                }
                
                approve = true;
                booking.updateStatus(currentBookID, approve);
                JOptionPane.showMessageDialog(rootPane, "Booking marked as completed.");
            }
        } else if (bPendRefund.isSelected()){
            int confirm;
            if (lreason.isVisible()) { 
                confirm = JOptionPane.showConfirmDialog(null, "Do you want to approve cancellation and proceed refund? Click Yes to approve/ No to deny request.");
                if (confirm == JOptionPane.YES_OPTION) {
                    approve = true;
                    booking.updateStatus(currentBookID, approve);
                    JOptionPane.showMessageDialog(rootPane, "Cancellation approved and refund successfully.");
                } else if (confirm == JOptionPane.NO_OPTION) {
                    booking.updateStatus(currentBookID , approve);
                    JOptionPane.showMessageDialog(rootPane, "Cancellation request denied");
                }
            } else {
                confirm = JOptionPane.showConfirmDialog(null, "Confirm refund?");
                if (confirm == JOptionPane.YES_OPTION){
                    approve = true;
                    booking.updateStatus(currentBookID, approve);
                    JOptionPane.showMessageDialog(rootPane, "Refund successfully. ");
                }
            }
        } 
        populateTable(); //refresh table
    }//GEN-LAST:event_bActionActionPerformed

    private void bBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackActionPerformed
        dispose();
        adminMain frame = new adminMain();
        frame.setVisible(true);
    }//GEN-LAST:event_bBackActionPerformed

    private void bPendConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPendConfirmActionPerformed
        bAction.setText("Confirm");
        bAction.setVisible(true);
        bAll.setSelected(false);
        bPendReturn.setSelected(false);
        bPendRefund.setSelected(false);
        bConfirmed.setSelected(false);
        bCompleted.setSelected(false);
        bRefunded.setSelected(false);
        clearBookingDetailsLabels();
        populateTable();
    }//GEN-LAST:event_bPendConfirmActionPerformed

    private void bConfirmedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConfirmedActionPerformed
        bAction.setVisible(false);
        bAll.setSelected(false);
        bPendReturn.setSelected(false);
        bPendRefund.setSelected(false);
        bPendConfirm.setSelected(false);
        bCompleted.setSelected(false);
        bRefunded.setSelected(false);
        clearBookingDetailsLabels();
        populateTable();
    }//GEN-LAST:event_bConfirmedActionPerformed

    /**
     * @param args the command line arguments
     */
    private void clearBookingDetailsLabels() {
        sBookID.setText("");
        sUsername.setText("");
        sCarName.setText("");
        sCarType.setText("");
        sStartDate.setText("");
        sEndDate.setText("");
        sPayAmount.setText("");
        sBookingStatus.setText("");
        lreason.setText("");
    }
    
    private void initSearch() {
        sorter = new TableRowSorter<>(tBooking.getModel());
        tBooking.setRowSorter(sorter);
    }

    private void resetSearch() {
        tfSearch.setText("");
        sorter.setRowFilter(null);
    }

    private void addTableListener() {
        tBooking.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tBooking.getSelectedRow();
                    if (selectedRow != -1) {
                        //get the selected row data
                        String bookingID = (String) tBooking.getValueAt(selectedRow, 0);
                        String username = (String) tBooking.getValueAt(selectedRow, 1);
                        String carName = (String) tBooking.getValueAt(selectedRow, 2);
                        String carType = (String) tBooking.getValueAt(selectedRow, 3);
                        String startDate = (String) tBooking.getValueAt(selectedRow, 4);
                        String endDate = (String) tBooking.getValueAt(selectedRow, 5);
                        String payAmount = (String) tBooking.getValueAt(selectedRow, 6);
                        String bookStatus = (String) tBooking.getValueAt(selectedRow, 7);
                        String cancelReason = "";
                        
                        //get cancel reason
                        try (BufferedReader reader = new BufferedReader(new FileReader("booking.txt"))) {
                            String line;
                            while ((line = reader.readLine()) != null) {
                                String[] record = line.split(",");
                                if (record[0].equals(bookingID)) { 
                                    if ("null".equals(record[8])){
                                        cancelReason = null;
                                    } else {
                                        cancelReason = record[8];
                                    }
                                    break;
                                }
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        
                        //set the data to text fields
                        sBookID.setText(bookingID);
                        sUsername.setText(username);
                        sCarName.setText(carName);
                        sCarType.setText(carType);
                        sStartDate.setText(startDate);
                        sEndDate.setText(endDate);
                        sPayAmount.setText(payAmount);
                        sBookingStatus.setText(bookStatus);
                        
                        //show or hide the cancellation reason label
                        if (cancelReason != null) {
                            lreason.setText(cancelReason);
                            lcancel.setVisible(true);
                            lreason.setVisible(true);
                        } else {
                            lcancel.setVisible(false);
                            lreason.setVisible(false);
                        }
                    }
                }
            }
        });
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tBooking.getModel();
        model.setRowCount(0);
        model.setColumnCount(0);
        //header
        model.addColumn("Booking ID");
        model.addColumn("Username");
        model.addColumn("Car Name");
        model.addColumn("Car Type");
        model.addColumn("Start Date");
        model.addColumn("End Date");
        model.addColumn("Payment Amount");
        model.addColumn("Status");

        try (BufferedReader reader = new BufferedReader(new FileReader("booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] record = line.split(",");
                String rBookingID = record[0];
                String rCarID = record[1];
                String rStartDate = record[2];
                String rEndDate = record[3];
                String rPayAmount = record[5];
                String rBookingStatus = record[6];
                String rUser = record[7];
                
                this.carID = Integer.parseInt(rCarID);

                //get car details based on car ID
                Car car = new Car();
                String[] carDetails = car.getCarDetails(rCarID);

                //check the selected radio button and filter bookings accordingly
                if (bAll.isSelected()) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                } else if (bPendConfirm.isSelected() && rBookingStatus.equals("PAID")) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                } else if (bPendReturn.isSelected() && rBookingStatus.equals("CONFIRMED")) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                } else if (bPendRefund.isSelected() && (rBookingStatus.equals("CANCELLED") || rBookingStatus.equals("PENDING CANCEL"))) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                } else if (bCompleted.isSelected() && rBookingStatus.equals("COMPLETED")) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                } else if (bRefunded.isSelected() && rBookingStatus.equals("REFUNDED")) {
                    //add the booking details to the model
                    model.addRow(new Object[]{rBookingID, rUser, carDetails[0], carDetails[1], rStartDate, rEndDate, "RM" + rPayAmount, rBookingStatus});
                }
                tBooking.setModel(model);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Set the model to the table
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminManageBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminManageBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminManageBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminManageBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminManageBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAction;
    private javax.swing.JRadioButton bAll;
    private javax.swing.JButton bBack;
    private javax.swing.JRadioButton bCompleted;
    private javax.swing.JRadioButton bConfirmed;
    private javax.swing.JRadioButton bPendConfirm;
    private javax.swing.JRadioButton bPendRefund;
    private javax.swing.JRadioButton bPendReturn;
    private javax.swing.JRadioButton bRefunded;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cUniqueID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lcancel;
    private javax.swing.JLabel lreason;
    private javax.swing.JLabel sBookID;
    private javax.swing.JLabel sBookingStatus;
    private javax.swing.JLabel sCarName;
    private javax.swing.JLabel sCarType;
    private javax.swing.JLabel sEndDate;
    private javax.swing.JLabel sPayAmount;
    private javax.swing.JLabel sStartDate;
    private javax.swing.JLabel sUsername;
    private javax.swing.JTable tBooking;
    private javax.swing.JLabel tMessage;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
